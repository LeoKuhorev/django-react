{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","defaultItem","id","name","submitted","useState","activeItem","setActiveItem","tasks","setTasks","editing","setEditing","useEffect","console","log","fetchTasks","a","fetch","response","json","data","getCookie","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","handleSubmit","e","preventDefault","csrftoken","url","method","headers","body","JSON","stringify","status","deleteItem","task","changeCompleted","completed","className","onSubmit","style","flex","type","value","placeholder","onChange","target","map","key","onClick","startEdit","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.17708ae6.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const defaultItem = {\n    id: null,\n    name: \"\",\n    submitted: false,\n  };\n\n  // State variables\n  const [activeItem, setActiveItem] = useState(defaultItem);\n  const [tasks, setTasks] = useState([]);\n  const [editing, setEditing] = useState(false);\n\n  // Fetch items when component renders\n  useEffect(() => {\n    console.log(\"Fetching...\");\n    fetchTasks();\n  }, [activeItem]);\n\n  // Get items from DB\n  const fetchTasks = async () => {\n    const response = await fetch(\"http://localhost:8000/api/v1/task-list/\");\n    const data = await response.json();\n    setTasks(data);\n  };\n\n  const handleChange = (e) => {\n    const name = e.target.value;\n    setActiveItem({ ...activeItem, name: name });\n  };\n\n  // Get a value from the cookie\n  const getCookie = (name) => {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== \"\") {\n      const cookies = document.cookie.split(\";\");\n      for (let i = 0; i < cookies.length; i++) {\n        const cookie = cookies[i].trim();\n        // Does this cookie string begin with the name we want?\n        if (cookie.substring(0, name.length + 1) === name + \"=\") {\n          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n          break;\n        }\n      }\n    }\n    return cookieValue;\n  };\n\n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    try {\n      const csrftoken = getCookie(\"csrftoken\");\n      let url = \"http://localhost:8000/api/v1/task-create\";\n\n      if (editing) {\n        url = `http://localhost:8000/api/v1/task-update/${activeItem.id}`;\n        setEditing(false);\n      }\n\n      const response = await fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-CSRFToken\": csrftoken,\n        },\n        body: JSON.stringify(activeItem),\n      });\n\n      if (response.status === 200) {\n        setActiveItem(defaultItem);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const startEdit = (task) => {\n    setActiveItem(task);\n    setEditing(true);\n  };\n\n  const deleteItem = async (task) => {\n    const csrftoken = getCookie(\"csrftoken\");\n    const url = `http://localhost:8000/api/v1/task-delete/${task.id}`;\n    try {\n      const response = await fetch(url, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-CSRFToken\": csrftoken,\n        },\n      });\n      if (response.status === 200) {\n        fetchTasks();\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const changeCompleted = async (task) => {\n    task.completed = !task.completed;\n    const csrftoken = getCookie(\"csrftoken\");\n    const url = `http://localhost:8000/api/v1/task-update/${task.id}`;\n\n    try {\n      await fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-CSRFToken\": csrftoken,\n        },\n        body: JSON.stringify(task),\n      });\n\n      fetchTasks();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <div id=\"task-container\">\n        <div id=\"form-wrapper\">\n          <form id=\"form\" onSubmit={handleSubmit}>\n            <div className=\"flex-wrapper\">\n              <div style={{ flex: 6 }}>\n                <input\n                  className=\"form-control\"\n                  id=\"name\"\n                  type=\"text\"\n                  value={activeItem.name}\n                  placeholder=\"Add task...\"\n                  onChange={handleChange}\n                />\n              </div>\n\n              <div style={{ flex: 1 }}>\n                <input id=\"submit\" type=\"submit\" className=\"btn btn-warning\" />\n              </div>\n            </div>\n          </form>\n        </div>\n\n        <div id=\"list-wrapper\">\n          {tasks.map((task) => (\n            <div className=\"task-wrapper flex-wrapper\" key={task.id}>\n              <div style={{ flex: 7 }} onClick={() => changeCompleted(task)}>\n                {task.completed ? (\n                  <strike>{task.name}</strike>\n                ) : (\n                  <span>{task.name}</span>\n                )}\n              </div>\n\n              <div style={{ flex: 1 }}>\n                <button\n                  className=\"btn btn-sm btn-outline-info\"\n                  onClick={() => startEdit(task)}\n                >\n                  Edit\n                </button>\n              </div>\n\n              <div style={{ flex: 1 }}>\n                <button\n                  className=\"btn btn-sm btn-outline-danger delete\"\n                  onClick={() => deleteItem(task)}\n                >\n                  X\n                </button>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}